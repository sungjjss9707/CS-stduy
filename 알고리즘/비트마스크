비트마스크

정수의 이진수 표현을 자료 구조로 쓰는 기법

장점
  빠른 수행 시간 : 비트마스크 연산은 O(1)에 구현되는 것이 많다. 비트마스크를 사용할 수 있다는 말은 원소의 수가 많지 않다는 뜻이어서 큰 속도 향상은 없지만,
    연산을 여러 번 수행해야하는 경우에는 이러한 최적화로 큰 속도 향상을 가져올 수 있다.
  간결한 코드 집합 연산들을 반복문 없이 비트 연산으로 처리하기 때문에 코드의 길이가 간결해진다.
  더 작은 메모리 사용량 비트마스크를 사용하면 같은 데이터를 더 적은 메모리를 사용해 표현할 수 있다.
  배열을 비트마스크로 대체 불린 값을 갖는 배열을 비트마스크를 사용해 같은 정보를 정수 변수로 나타낼 수 있다.   
 
유의점
   비트마스크를 사용할 때는 괄호 사용을 습관화하는 것이 좋다.
   변수의 모든 비트를 사용해 비트마스킹을 하고싶다면 부호 없는 정수형을 쓰거나 크기가 더 큰 정수를 사용하는 것이 좋다.
      long long이나 unsigned int 쓰도록하자
      
  비트마스크의 공집합 : 0
  비트마스크의 꽉찬 풀집합 : (1<<N)-1 (이때 N은 비트 수)
  
  집합에 원소 추가
      비트마스크에서 원소를 추가한다는 것은 해당 자리의 비트를 1로 만드는 것이다. 
      기존 값이 result 라고 했을 때, 
      원소 p 를 추가하는 것은 result |= (1 << p) 로 나타낼 수 있다.
      
  원소 포함 여부 확인
      result 에 p 번 원소가 포함되어있는지 확인하려면 result & (1 << p) != 0 의 조건으로 확인
      
  원소의 삭제
      result &= ~(1 << p)
