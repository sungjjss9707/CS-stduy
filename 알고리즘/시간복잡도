시간복잡도

시간 복잡도는 서로 다른 알고리즘의 효율성을 비교할 때 사용함. 
시간 복잡도(Time Complexity)는 알고리즘의 절대적인 실행 시간을 나타내는 것이 아니다.
알고리즘을 수행하는 데 연산들이 몇 번 이루어지는 지를 숫자로 표기한다. 
그런데 연산(Operation)의 실행 횟수는 보편적으로 그 값이 변하지 않는 상수(Constant)가 아니라 입력한 데이터의 개수를 나타내는 n에 따라 변함.
연산의 개수를 입력한 데이터의 개수 n의 함수로 나타낸 것을 시간 복잡도 함수라고 말합니다. 시간 복잡도에는 몇 가지 규칙이 존재.

규칙 : 
1. 입력값(n)은 항상 0보다 크다.
2. 함수는 많은 입력값이 있을 때 더 많은 작업을 한다.
3. 시간 복잡도에서는 모든 상수를 삭제.(2N, 3N, 5N+1 등등 모두 N으로 간주)
4. 낮은 차수의 항들은 무시.(2N^2+3N 은 N^2으로 간주)
5. 시간 복잡도 함수가 log 함수를 포함할 경우 밑은 무시.
6. 등호를 사용하여 표현.( 2N = O(N) )

접근적 표기법(Big Oh Notation) :
시간복잡도는 입력 크기에 대한 함수로 표기하는데 이를 단순한 함수로 표현하기 위해 점근적 표기를 사용
이는 입력이 무한으로 커질때의 복잡도를 간단하게 표현하기 위한 방법임.
O(1) < O(logn) < O(n) <  O(nlogn) < O(n^2) < O(n^3) < O(2^n) < O(n!)

*참고*
O (빅 오 복잡도) : 비교 대상인 그래프가 일치 혹은 아래에 있을 때. 비교 대상인 다른 알고리즘과 같거나 더 빠르다(최악의경우)
θ (세타 복잡도) : 비교 대상인 그래프가 일치할 때. 비교 대상인 다른 알고리즘과 같다.(평균의경우)
Ω (빅 오메가 복잡도) : 비교 대상인 그래프가 일치 혹은 위에 있을 때. 비교 대상인 다른 알고리즘과 같거나 느리다.(최선의경우)
o (리틀 오 복잡도) : 비교 대상인 그래프가 아래에 있을 때. 비교 대상인 다른 알고리즘보다 더 빠르다.
ω (리틀 오메가 복잡도) : 비교 대상인 그래프가 위에 있을 때. 비교 대상인 다른 알고리즘과 느리다.
