최단경로 알고리즘

  가중그래프에서 간선의 가중치의 합이 최소가 되는 경로를 찾는 문제
  종류로는 다익스트라 알고리즘, 벨만 - 포드 알고리즘, 플로이드 - 워셜 알고리즘, BFS 등이 있다.
  
  
  다익스트라 알고리즘
    
    정점(S)에서 다른 모든까지의 최단 경로를 구하는 알고리즘. 음의 가중치가 없어야 함.
    과정:
      1. 출발노드 S를 설정한다.
      2. 출발노드 S에서 모든 노드들까지의 최단거리를 저장하는 배열 dist를 선언하고 무한대로 초기화함
      3. 방문하지 않은 노드중에서 최단거리가 가장 짧은 노드를 선택한다.(원래 여기서 V번 시간이 걸리는데 priority_queue를 쓰면 logV번으로 줄일 수 있음)
      4. 해당노드를 거쳐가는 다른노드로 가능 비용을 모두 계산하여 이득인걸로 체택해서 dist를 갱신
      5. 모든 노드를 방문할때까지 4번을 반복함
    시간복잡도 : 방문하지않은 노드중에서 제일 짧은 노드 선택하기는데 V시간 소모, 그거를 노드 갯수 V번만큼 하므로 시간복잡도는 O(V^2)
    
    
  벨만 - 포드 알고리즘
  
    출발정점(S)에서 다른 모든 정점까지의 최단경로를 구하는 알고리즘. 음의 가중치가 있어도 가능
    과정 :
      1. 출발노드 S를 설정한다.
      2. 출발노드 S에서 모든 노드들까지의 최단거리를 저장하는 배열 dist를 초기화함(연결 안돼있으면 무한대로 초기화 하면됨)
      3. 그래프의 모든 간선을 돌면서 각 노드로 가는 비용을 계산하여 최단거리 배열 dist 갱싱
      4. 이 과정을 모든 노드에 대해서 한다.
      5. 3번과정을 한번 더 했을때 dist가 또 갱신이 되면 음의 사이클이 존재한다는 뜻임
    시간복잡도 : 모든노드에 마다(V) 모든 간선(E)을 다 찾아서 갱신하므로 O(VE)
    
    
  플로이드 - 워셜 알고리즘
  
    그래프의 모든 노드 쌍에 대해 최단거리를 구하는 알고리즘이다. 의의 가중치도 가능
    과정 :
      모든 노드쌍 A,B 사이의 모든 중간노드 M에 대해서 dist[A][B] > dist[A][M]+dist[M][B]
      를 만족하면 dist[A][B] = dist[A][M]+dist[M][B] 로 초기화 시킴
      그렇기 때문에 코드는 아래와 갔다.
        for(m=1; m<=numofnode; ++m){
          for(a=1; a<=numofnode; ++a){
             for(b=1; b<=numofnode; ++b){
               if(dist[a][b] > dist[a][m]+dist[m][b]) dist[a][b] = dist[a][m]+dist[m][b]
             }
          }
        }
    시간복잡도 : 3중 for문이므로 O(V^3)임
         
