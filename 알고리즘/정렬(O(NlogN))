병합정렬

  원소 개수가 1또는 0이될때까지 계속 반으로 쪼갠 다음에 바로옆에 있는 무리끼지 맨 앞에 숫자들끼리 비교하면서 병합함
  *시간복잡도 : O(NlogN)
  *특징 : 폰노이만이 개발함
          성능은 전반적으로 퀵정렬보다 느리다(퀵정렬은 병합정렬보다 더 참조의 지역성의 성질을 띤다. 즉, 캐쉬의 도움을 더욱 받을 수 있게 된다)
          최대장점은 데이터 상태와 별 상관없이 일정한 성능을 보장하며, 구현자가 맘만 먹으면 stable한 코드를 쉽게 구현가능(같을땐 안바꿔버리면 된다)(퀵, 힙은 바뀔수도)
          분할을 끝까지 다 한다음에 병합하는 과정을 거치는데 분할하는데는 시간 거의 안걸림. 병합하는데 nlogn걸리는 거임
  *코드 :
  void merge(int start, int end){
    int mid = (start+end)/2;
    int left = start, right = mid+1, index = start,i;
    while(left<=mid&&right<=end){
      if(arr[left]<arr[right]){
        temp[index++] = arr[left++];
      }
      else{ //같으면 여기로 와서 왼쪽 무리에 있는거부터 들어감(stable함)
        temp[index++] = arr[right++];
      }
    }
    if(left>mid){ 
      while(right<=end){
        temp[index++] = arr[right++];
      }
    }
    else{
      while(left<=mid){
        temp[index++] = arr[left++];
      }
    }
    for(i=start; i<=end; ++i){  //템프라는 임시저장소가 필요하기때문에 메모리가 좀더 많이 듬
      arr[i] = temp[i];
    }
  }
  
  void merge_sort(int start, int end){
    if(start>=end) return;
    int mid = (start+end)/2;
    merge_sort(start, mid);
    merge_sort(mid+1, end);
    merge(start, end);
  }
  
  
퀵정렬

  피벗을 하나 고른다. 피벗앞에는 피벗보다 작은원소들이, 피벗뒤에는 큰 원소들을 위치시킨다.
  이 작업이 한번 끝나면 피벗의 위치가 영구적으로 결정된다. 결정된 피벗의 index를 k라고 할때 그 후 피벗의 앞(1 ~ k-1)과 뒤 (k+1 ~ len)으로 분할해서
  똑같이 이 작업들을 해준다. 분할한 무리의 크기가 0또는 1이되면 그만한다.
  *시간복잡도 : O(NlogN)
  *특징 : 시간 복잡도는 최선의 경우엔 O(nlogn), 최악의 경우엔 O(n²)
          평균적으로 가장 빠른 정렬 알고리즘
          정렬하고자 하는 배열 내에서 교환하는 방식이므로 별도의 메모리 공간을 필요로 하지 않음
          불안정 정렬(Unstable Sort)
          정렬된 배열에 대해서는 불균형 분할에 의해 오히려 수행 시간이 더 걸림 -> 피벗을 가장 작은 원소나 가장 큰 원소로 골라버리면 최악의 시간으로 가게 됨
  *코드 :          
    void quick_sort(int start, int end){
      if(start>=end) return;
      int temp;
      int pivot = arr[start];
      int left = start+1, right = end; //left는 pivot보다 큰 원소를, right는 pivot보다 작은 원소를 찾음
      while(1){
        if(left>=right){
          if(arr[left]>pivot){
            left--;
          }
          break;
        }
        if(arr[left]>pivot&&arr[right]<pivot){
          temp = arr[left];
          arr[left] = arr[right];
          arr[right] = temp;
        }
        if(arr[left]<=pivot){
          left++;
        }
        if(arr[right]>=pivot){
          right--;
        }
      }
      temp = arr[left];
      arr[left] = arr[start];
      arr[start] = temp;
      quick_sort(start, left-1);
      quick_sort(left+1, end);
    }
  
  힙정렬
  
    최대힙, 또는 최소힙으로 루트노드를 하나씩 삭제하면서 정렬함
    *시간복잡도 : O(NlogN)
    *특징 : 상위몇개 뽑는데 탁월함
    *코드 :
    void heap_sort(int numofnum){
	    int i;
	    priority_queue<int, vector<int>, greater<int>> pq;
	    for(i=0; i<numofnum; ++i){
		    pq.push(arr[i]);
	    }
	    for(i=0; i<numofnum; ++i){
		    arr[i] = pq.top();
		    pq.pop();
	    }
  } 
