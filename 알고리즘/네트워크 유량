네트워크 유량 

  네트워크 유량이란 유방향 그래프에 상한 용량이 존재하는 것이다. 그 상한 용량 이상 한번에 보내기 불가하다.
  
  용어정리 :
      유량(flow) : 두 정점 사이에서 현재 흐르는 양
      용량(capacity) : 두 정점 사이에 최대로 흐를수 있는 양
      잔여 용량(residual capacity) : 두 정점 사이에서 현재 더 흐를 수 있는 유량. (용량 - 유량)
      소스(source) : 유량이 시작되는 정점. 보통 s로 표현
      싱크(sink) : 유량이 도착하는 정점. 보통 t로 표현
      증가 경로(augmenting path) : s에서 t로 유량이 흐르는 경로
      c(u,v) : capacity : 정점 u에서 v로 가는 간선의 용량
      f(u,v) : flow : 정점 u에서 v로 실제 흐르는 유량
      r(u,v) : residual : 정점 u에서 v로 가는 잔여 용량 r(u,v) = c(u,v) - f(u,v)
      
  만족해야하는 성질 :
      1. 각 간선에 흐르는 유량은 그 간선의 용량을 넘어서는 안 됨.
      2. source와 sink를 제외한 정점에서는 들어오는 유량 총합과 나가는 유량 총합이 같아야 한다.
      3. 간선 (u, v) 방향으로 유량이 흐르고 있다면, 역방향으로는 음의 유량이 그만큼 흐르고 있는 것으로 취급.
      
  포드-풀커슨 알고리즘 :
      진행과정 :
          1. r(s,t) > 0인 증가 경로를 찾는다. 이때 이건 단순 DFS 기 때문에 최단경로 아닐 수 있다.
              => 그냥 쉽게 말하면 s에서 t로 가는 증가경로중에 아무거나 하나 찾으면 됨
          2. 찾은 증가 경로 상에서 r(u,v)이 가장 낮은 엣지(u,v)를 찾는다. 이때  r(u,v)를 f라고 하자.
          3. f만큼 S에서 T까지 유량을 흘려보낸다(경로의 모든 엣지에 f만큼 유량 추가). 
             그런데 이때 세 번째 성질을 만족시키기 위해 f(v, u) -= F 또한 행해야 한다
          4. 더 이상 증가 경로가 발견이 되지 않을 때까지 반복한다.
          
      시간복잡도 : 시간복잡도는 O((V+E)F) 인데, E가 V를 도미넌트 하므로 보통 O(EF)
          -> 이때 F는 최대유량인데 증가경로당 유량이 최소 1이기때문에 F를 곱해주는거임
  
  에드몬드-카프 알고리즘 : 
      포드-풀커슨 알고리즘이 dfs를 쓴거면 이건 bfs로 찾음(백준 6086 그렇게 품)
      bfs를 쓰기 때문에 시간복잡도를 더 단축시킬 수도 있음
      
      시간복잡도 : O(VE^2) 와 O(Ef) 중 더 작은값
