트랜잭션

  데이터 베이스의 상태를 변경하는 하나의 논리적 기능을 수행하기 위한 작업의 단위
  쉽게 말해 한꺼번에 수행되어야 할 연산을 모아놓은 것
  데이터 베이스는 항상 정확하고 일관된 데이터를 유지해야하는데 트랜잭션은 이러한 성질을 유지할 수 있게 도와줌
  
  트랜잭션의 특성 : 
      Atomicity (원자성)
      Consistency (일관성)
      Isolation (격리성)
      Durability (지속성)
      
  Atomicity (원자성) : 트랜잭션을 구성하는 연산들은 데이터베이스에 모두 반영되거나 반영되지 않아야함을 의미
                       트랜잭션 수행과정에서 오류가 발생하여 작업이 완료되지 못하면 트랜잭션 시작전 상태로 데이터베이스를 되돌려야 함.
  Consistency (일관성) : 트랜잭션이 성공적으로 수행된 후에도 데이터베이스가 일관성 있는 상태를 유지해야함을 의미
                        시스템이 가지고 있는 고정요소는 트랜잭션 수행 전과 트랜잭션 수행 완료 후의 상태가 같아야 함.
  Isolation (격리성) : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 현재 수행중인 트랜잭션 실행 도중 다른 트랜잭션의 연산이 끼어들 수 없음을 의미
  Durability (지속성) : 트랜잭션이 성공적으로 완료된 이후 데이터베이스에 반영한 수행 결과는 손실되지 않고 영구적으로 유지되어야 함을 의미        
  
  
  트랜잭션 연산 : 
      COMMIT : 트랜잭션이 성공적으로 수행되었음을 선언하는 연산
               commit 연산의 실행을 통해 트랜잭션의 수행이 성공적으로 완료되었음을 선언하고 결과를 최종 데이터베이스에 반영.
      ROLLBACK : 트랜잭션이 수행을 실패했음을 선언하고 작업울 취소하는 연산
                 트랜잭션 수행되는 도중 일부 연산이 처리되지 못한 상황에서는 rollback 연산을 실행하여 트랜잭션의 수행이 실패했음을 선언하고, 
                 데이터베이스를 트랜잭션 수행 전의 일관된 상태로 되돌려야 함.
                 
  병행제어 : 병행제어란 여러개의 트랜잭션이 실행될 때 트랜잭션들이 데이터베이스의 일관성을 파괴하지 않고 다른 트랜잭션에 영향을 주지 않으면서 트랜잭션을 제어하는 것을 의미함.
      병행 실행의 문제점 : 
          1. 분실된 갱신: 두 개의 트랜잭션이 같은 데이터에 대해서 동시에 갱신 작업을 하면 하나의 갱신 작업이 분실되는 경우
          2. 모순성: 한 개의 트랜잭션 작업이 갱신 작업을 하고 있는 상태에서 또 하나의 트랜잭션이 같은 작업 구역에 침범하여 작업하게 되어 데이터베이스의 일관성을 해치는 경우
          3. 연쇄복귀: 같은 자원을 사용하는 두개의 트랜잭션 중 한 개의 트랜잭션이 성공적으로 일을 수행하였다 하더라도 다른 트랜잭션이 처리하는 과정에서 실패하게 되면 
                       두 개의 트랜잭션 모두가 복귀되는 현상
          4. 비완료 의존성: 한 개의 트랜잭션이 수행과정에서 실패하였을 때, 이 트랜잭션이 회복되기 전에 다른 트랜잭션이 수행 결과를 참조하는 현상
      
      병행제어 기법
          1. 로킹(Locking) : 트랜잭션이 어떤 데이터에 접근하고자 할 때 로킹을 수행하며 로킹을 한 트랜잭션만이 로킹을 해제할 수 있음. 
                             트랜잭션은 로킹이 된 데이터에 대해서만 연산을 수행할 수 있으며 로킹의 단위에는 필드, 레코드, 파일, 데이터베이스 모두 로킹이 될 수 있음
              특징: 로킹 단위가 크면 : 관리하기가 용이(로킹 오버헤드 감소), 하지만 동시성 수준이 낮아짐
              종류 : 
                  1. S-lock(공유잠금) : 공유잠금을 설정한 트랜잭션은 데이터 항목에 대해 읽기 연산(read)만 가능
                  2. X-lock(배타잠금) : 배타잠금을 설정한 트랜잭션은 데이터 항목에 대해서 읽기 연산(read)과 쓰기 연산(write) 모두 가능
          2. 타임스탬프(Time Stamp) : 데이터에 접근하는 시간을 미리 정하여 정해진 시간의 순서대로 데이터에 접근하며 수행함.
                                      직렬가능성을 보장하며 시간을 나눠 사용하기 때문에교착상태가 발생하지 않음, 하지만 연쇄복귀를 초래할 수 있음.
          3. 낙관적 병행제어 : 트랜잭션 수행 동안은 어떠한 검사도 하지 않고, 트랜잭션 종료 시에 일괄적으로 검사함
          4. 다중 버전 병행제어 : 하나의 데이터 아이템에 대해 여러 버전의 값을 유지하며 조회성능을 최대한 유지하기 위한 기법
  
  트랜잭션 격리수준
      트랜잭션의 네 가지 주요 성질인 원자성, 일관성, 고립성, 내구성 (ACID) 중 고립성(isolation) 을 구현하는 개념이다.
      고립성은 한 트랜잭션에서 데이터가 수정되는 과정이 다른 트랜잭션과는 독립적으로 진행되어야 한다는 특성이다.
      트랜잭션 격리수준(isolation level) 이란 동시에 여러 트랜잭션이 처리될 때, 트랜잭션끼리 얼마나 서로 고립되어 있는지를 나타내는 것이다.
      즉, 간단하게 말해 특정 트랜잭션이 다른 트랜잭션에 변경한 데이터를 볼 수 있도록 허용할지 말지를 결정하는 것이다.
      격리수준은 크게 아래의 4개로 나뉜다. 아래로 내려갈수록 트랜잭션 간 고립 정도가 높아지며, 성능이 떨어짐
          1. READ UNCOMMITTED
          2. READ COMMITTED
          3. REPEATABLE READ
          4. SERIALIZABLE
          
