멀티스레드가 구현된 프로그램 안에서 두 개 이상의 스레드가 동시에 어떤 기능을 수행함에 있어 
두개의 쓰레드가 만약 어떤 자원(변수) 같이 공유해서 사용하는 경우가 있다고 가정
각각의 쓰레드가 이 자원(변수) 특정한 값으로 수정하는 기능이 있다면 동시에 접근하는 이유로 인하여 이 자원의 값이 제대로 된 값을 유지하지 못하는 경우가 있을 수 있다.
이와 같이 멀티스레드 환경에서 발생하는 문제를 해결하기 위한 일련의 작업을 스레드 동기화(Thread Synchronization)라 부른다.
스레드 동기화 방법에 대해서는 세마포어(Semaphore), 뮤텍스(Mutex) 등이 있다.

임계 구역 (Critical Section)
    개념적 크리티컬 섹션 : 여러 프로세스(스레드)가 데이터를 공유하며 수행될 때, 각 프로세스(스레드)에서 공유 데이터를 접근하는 프로그램 코드 부분
    기능적 크리티컬 섹션 : 동기화 목적을 위해 사용되는 배타적 제어를 하기 위한 구조
                          Windows 객체 중 하나이며, 프로그램에서 CRITICAL_SECTION 타입 변수를 통해 사용
                          
   세마포어(Semaphore)
      Signaling 메커니즘 을 통해 자원에 대한 접근을 동기화하는 기술
      임계구역에 동시에 접근 가능한 스레드의 개수는 1개 이상이다.
      Signaling 메커니즘으로 락을 걸지 않은 스레드도 Signal을 통해 락을 해제할 수 있다.
          => wait 함수를 호출한 스레드만이 signal 함수를 호출할 수 있는 Mutex와의 차이점
      Spin-Lock 방식과 Block & Wakeup의 2가지 방식의 사용법이 존재한다.
      
      동작 원리 : 
          세마포어 S는 정수값을 가지는 변수이며, 다음과 같이 P와 V라는 명령에 의해서만 접근할 수 있다.
          P (Wait) : 임계 구역에 들어가는 동작 (프로세스 진입 여부를 자원의 개수 S 를 통해 결정)
          V (Signal) : 임계 구역에서 나오는 동작 (자원 반납 알림, 대기 중인 프로세스를 깨우는 신호)
          P는 임계 구역에 들어가기 전에 수행되고, V는 임계 구역에서 나올 때 수행된다. 이때 변수 값을 수정하는 연산은 모두 원자성을 만족해야 한다.
          다시 말해, 한 프로세스(또는 스레드)에서 세마포어 값을 변경하는 동안 다른 프로세스가 동시에 이 값을 변경해서는 안 된다.
          
          방법1 : Spin-Lock(busy-waiting) - 바쁜대기 : 
              P(S) {
                  while S <=0; // 아무것도 하지 않음 (반복문)
                  S--;
              }
              V(S) {
                  S++;
              }
              이 방법은 임계 구역에 들어갈 수 있을 때까지 빈 반복문을 수행하기 때문에, 
              단일처리기 다중프로세스 환경에서 처리기 효율이 떨어진다.
              또한 대기 중인 프로세스들 중 어느 것을 먼저 임계 구역에 진입시킬지를 결정할 수 없다.
          방법2 : Block & Wakeup
              wait(semaphore *S) {
                  S->value--;
                  if (S->value < 0 ) {              // 자원이 없다면
                      add this process to S->list;    // 프로세스를 큐에 넣고
                      block();                        // block 시킴
                   }
                }
                signal(semaphore *S) {
                    S->value++;
                    if (S->value <= 0) {               // 자원이 0이하라면 block중인 프로세스가 있다는 의미임.
                        remove a process P from S->list; // 대기하고 있는 프로세스를 가져옴.
                        wakeup(P);                       // 가져온 프로세스를 깨움.
                    }
                }
                최초 방법의 단점을 보완한 방법으로서 재움 큐를 활용하여 프로세스를 재우는 방식이다.

   뮤텍스(Mutex)
       Locking 메커니즘 을 통해 자원에 대한 접근을 동기화하는 상호배제 기술
       Locking 메커니즘으로 오직 하나의 스레드만이 동일한 시점에 뮤텍스를 얻어 임계 영역에 들어갈 수 있다.
          Lock : 임계 구역의 사용 권한을 얻음 (만약 다른 스레드가 임계 구역 수행중이면 종료시까지 대기)
          unlock : 현재 임계 구역을 모두 사용했음을 알림 (대기중인 다른 스레드가 임계구역에 진입할수 있음)
       Lock을 건 스레드만이 임계 영역에서 나갈 때 뮤텍스를 해제할 수 있다.
       뮤텍스는 상태가 1, 0 밖에 존재하지 않고, 바이너리 세마포어(Binary Semaphore)라고도 불림
       뮤텍스 알고리즘 : 
          1. 데커 알고리즘 (Dekker's Algorithm) : 
              프로세스 두 개 일 때 상호 배제를 보장하는 알고리즘 flag와 turn 변수를 통해 임계 구역에 들어갈 프로세스/스레드를 결정하는 방식
              flag : 프로세스 중 누가 임계영역에 진입할 것인지 나타내는 변수
              turn : 누가 임계구역에 들어갈 차례인지 나타내는 변수
              while(true) {
                  flag[i] = true;                 // 프로세스 i가 임계 구역 진입 시도
                  while(flag[j]) {                // 프로세스 j가 현재 임계 구역에 있는지 확인
                      if(turn == j) {             // j가 임계 구역 사용 중이면
                          flag[i] = false;        // 프로세스 i 진입 취소
                          while(turn == j);    // turn이 j에서 변경될 때까지 대기
                          flag[i] = true;         // j turn이 끝나면 다시 진입 시도
                      }
                  }
              }
              // ------- 임계 구역 ---------
              turn = j;               // 임계 구역 사용 끝나면 turn을 넘김
              flag[i] = false;      // flag 값을 false로 바꿔 임계 구역 사용 완료를 알림
          
          2. 피터슨 알고리즘 (Peterson's Algorithm) :
              프로세스 두 개 일 때 상호 배제를 보장하는 알고리즘 데커와 유사하지만, 상대방 프로세스/스레드에게 진입 기회를 양보하는 것에 차이가 있음
              while(true) {
                  flag[i] = true; // 프로세스 i가 임계 구역 진입 시도
                  turn = j; // 다른 프로세스에게 진입 기회 양보
                  while(flag[j] && turn == j) { // 다른 프로세스가 진입 시도하면 대기
                  }
              }
              // ------- 임계 구역 ---------
              flag[i] = false; // flag 값을 false로 바꿔 임계 구역 사용 완료를 알림
              
          3. 램퍼드의 제과점 알고리즘 (Lamport's bakery algorithm) : 
              여러 프로세스/스레드에 대한 처리가 가능한 알고리즘. 
              프로세스에게 고유한 번호를 부여하고, 번호를 기준으로 우선순위를 정하여 우선순위가 높은 프로세스가 먼저 임계 구역에 진입하도록 구현 (번호가 낮을수록 우선순위가 높음)
              while(true) {
                  isReady[i] = true; // 번호표 받을 준비
                  number[i] = max(number[0~n-1]) + 1; // 현재 실행 중인 프로세스 중에 가장 큰 번호 배정 
                  isReady[i] = false; // 번호표 수령 완료    
                  for(j = 0; j < n; j++) { // 모든 프로세스 번호표 비교
                      while(isReady[j]); // 비교 프로세스가 번호표 받을 때까지 대기
                      while(number[j] && number[j] < number[i] && j < i);
                      // 프로세스 j가 번호표 가지고 있어야 함
                      // 프로세스 j의 번호표 < 프로세스 i의 번호표
                  }
              }
              // ------- 임계 구역 ---------
              number[i] = 0; // 임계 구역 사용 종료       
