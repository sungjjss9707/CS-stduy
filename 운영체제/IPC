IPC(Inter-Process Communication)

  IPC는 프로세스들 간에 데이터를 주고 받는 통신 또는 그 방법을 칭한다.
  프로세스는 각각 OS로부터 할당받은 독립된 메모리 공간에서 실행된다. 
  하지만 정보 공유, 분산 처리로 작업 속도 향상, 시스템 기능 모듈화 등을 위해서 데이터를 공유하거나 서로 통신이 필요할 때가 있다. 
  이때 사용할 수 있도록 커널에서 여러 방식의 IPC를 제공합니다.
  IPC 는 크게 Message Passing(메시지 전달) 방식과 Shared Memory(공유 메모리) 방식이 있다.
  
  Message Passing(메시지 전달 방식) :
      Message Passing은 memory protection을 위해 OS가 커널 내부에 메시지를 기록할 수 있는 공간을 마련해 두어서 receive와 send 시스템 콜을 이용하여 메시지를 커널이 대리 전달
      따라서 OS의 간섭이 지속적으로 필요하고, 커널을 거쳐야 하기 때문에 시간이 오래 걸려 성능이 좋지 않다.
      또한 시스템 콜을 매번 사용하므로 오버헤드 발생할 수 있다.
          PIPE (익명 PIPE) : 
              파이프는 두 개의 프로세스를 연결하는 1:1 통신이다.  이때, 하나의 프로세스는 데이터를 쓰기만, 다른 하나는 데이터를 읽기만 하는 단방향 통신만 가능
              한쪽 방향으로만 통신이 가능한 파이프의 특징 때문에 Half-Duplex(반이중) 통신이라고 부르기도 한다.
          Named PIPE(FIFO) : 
              통신을 위해 이름이 있는 파일을 사용하기 때문에 전혀 모르는 상태의 프로세스들 사이의 통신에서도 사용한다.
          Message Queue : 
              Message Queue는 고정된 크기를 갖는 메시지의 연결 리스트를 이용한 메시지 단위의 통신이다.
              메세지의 형태는 사용자가 정의할 수 있으며, 통신하고자 하는 프로세스 간에 정의가 필요하다.
              출력 방식으로 보자면 Named PIPE와 동일하다고 볼 수 있지만, Name PIPE가 데이터의 흐름이라면 Message Queue는 메모리 공간이라는 차이가 있다.
          Socket : 
              Socket은 일반적으로 두 네트워크 프로그램 사이에서 데이터의 입출력의 관문, 또는 그를 위한 운영체제의 API로 많이 쓰인다.
              프로세스들 사이의 통신에서도 OS가 제공하는 Port를 통해 사용할 수 있습니다.
              
  Shared Memory(공유 메모리 방식) : 
      다수의 프로세스가 동시에 작동하는 Linux 운영체제의 특성상 프로세스의 메모리 영역은 반드시 보호되어져야 한다.
      그렇지만 메모리 영역에 있는 데이터를 다른 프로세스도 사용할 수 있도록 해야하는 경우도 있다.
      Thread에서 처럼 메모리 영역을 공유한다면 더 편하게 데이터를 함께 사용할 수 있다. 
      Shared Memory(공유 메모리)는 프로세스간 메모리 영역을 공유해서 사용할 수 있도록 허용한다. 
      프로세스가 공유 메모리 할당을 커널에 요청하면 커널은 해당 프로세스에 메모리 공간을 할당해준다. 이후 접근할 프로세스들이 규약을 정해서 해당 메모리 영역에 접근할 수 있다.
      공유메모리는 커널이 처음 생성하지만 이후에 커널의 도움 없이 곧바로 메모리에 접근할 수 있기 때문에 다른 모든 IPC들 중에서 가장 빠르게 작동할 수 있다.
      하지만, Producer-Consumer Problem 같은 동기화 문제가 생길 수 있기 때문에 Semaphore 등으로 해결해야 한다.
