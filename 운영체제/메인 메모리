주 메모리(Main Memory)

  메모리는 주소가 할당된 일련의 워드 또는 바이트로 구성된다. 
  CPU는 메모리로부터 다음 수행할 명령어를 가져오기때문에 메모리를 관리하는 것은 매우 중요한 일이다.
  
  주 메모리와 관련된 배경 지식 : 
      주 메모리 및 레지스터 : CPU가 접근할 수 있는 유일한 저장장치이다. 
                            따라서 모든 명령어와 자료들은 CPU가 직접 접근할 수 있는 주 메모리와 레지스터에 존재해야 함.
      베이스(base) 레지스터 : 각 프로세스는 독립된 메모리 공간을 갖는다. 
                             따라서 특정 메모리 공간에는 특정 프로세스만 접근할 수 있도록 합법적인 메모리 주소 영역을 설정해야 한다. 
                            가장 작은 합법적인 물리 메모리 주소 값을 저장하는 것이 베이스 레지스터이다.
      상한(limit) 레지스터 : 주어진 영역의 크기를 저장
      
  주소의 할당(Address Binding)
      이진 실행 파일 형태의 프로그램은 디스크에 존재하고 있다가 프로그램이 실행되면 주 메모리로 올라와 프로세스가 된다.
      프로세스는 실행 동안 디스크와 주 메모리 사이를 이동할 수 있는데 이를 위해 프로세스가 사용했던 기억 공간(주소) 할당이 필요하다.
      메모리 주소 공간에서 명령어와 자료의 할당 시점의 분류 : 
          컴파일 시간 할당(Compile Time Binding)
              컴파일 시 프로세스가 물리 메모리 내 진입할 위치를 알 수 있다.
              즉 컴파일 시 바인딩 된 주소는 절대적인 주소이며, 논리적인 주소와 물리적인 주소가 같다.
              따라서 이후 물리 메모리 위치를 변경해야할 경우 컴파일을 다시 해야한다.
          적재 시간 할당(Load Time Binding)
              컴파일 시 물리 메모리 위치를 알 수 없다면 컴파일러는 일단 이진 코드를 재배치 가능 코드로 만들고, 
              심볼과 번지수 할당은 프로그램이 주 메모리에 적재되는 시간에 이루어진다.
              따라서 프로그램 내부에서 사용하는 논리적인 주소와 실제 주 메모리 상의 물리적인 주소는 다르다.
              이후 물리 메모리 위치를 변경해야할 경우 재적재를 해야한다.
          실행 시간 할당(Execution Time Binding/RunTime Binding)
              프로세스가 실행하는 중간에도 메모리 내의 한 세그먼트에서 다른 세그먼트로 물리 메모리 주소가 이동할 수 있는 경우를 말한다.
              이를 위해서는 하드웨어적인 지원(MMU, Memory Management Unit)과 주소 매핑 테이블이 필요하다.
              
      논리 주소 공간과 물리 주소 공간
          CPU가 생성하는 주소를 논리 주소(Logical Address), 메모리가 취급하는 주소(메모리 주소 레지스터에 주어지는 주소)를 물리 주소(Physical Address)라고 한다.
          사용자 프로그램의 경우 실제적인 물리 주소를 절대 알 수 없다. 사용자 프로그램은 오직 논리 주소를 사용한 것이고, 메모리 하드웨어 상 주소는 논리 주소를 물리 주소로 바꾼 것이다.
      
      동적 적재(Dynamic Loading)
          프로세스는 실행되기 전 모든 자료가 미리 메모리에 올라가 있어야하는데, 만약 메모리 크기가 프로세스 크기보다 작다면 이는 불가능함.
          이를 해결하기 위한 것이 동적 적재입니다.
          동적 적재는 각 루틴을 재배치 가능 상태로 만들어 디스크에서 대기시킨 뒤, 메모리에 올라가 있는 주 프로그램이 해당 루틴을 필요로 해 
            호출한 시기에 재배치 가능 연결 적재기(relocatable linking loader)를 이용해 주 메모리로 올린다.
          따라서 사용되지 않는 루틴은 결코 미리 적재되지 않기때문에 메모리를 절약할 수 있습니다.
          
      동적 연결과 공유 라이브러리(Dynamic Linking & Shared Library)
          시스템 라이브러리를 실제 해당 라이브러리를 실행할 때에 동적으로 연결하는 것을 말한다.
          프로그램 실행 시 시스템 라이브러리를 부르면 스텁(stub)이라는 작은 코드 조각이 생긴다. 
          이 스텁을 이용해 필요로 하는 라이브러리가 디스크와 메모리 중 어디에 존재하는지 번지수를 찾고, 다음번에는 기억했던 번지수를 이용해 쉽게 라이브러리 루틴을 수행할 수 있다.
          
          
      주 메모리 할당 기법
          스와핑(Swapping) : 
              프로세스는 실행 시 주 메모리에 올라와 있어야 하지만 라운드 로빈과 같은 CPU 스케줄링 시 잠시 보조 메모리로 보내졌다가 돌아오게될 수도 있다.
               이렇게 프로세스를 주 메모리와 예비 저장 장치 사이에서 이동시키는 것을 스와핑이라고 한다. 보조 메모리는 주로 디스크를 사용한다.
               주 메모리에서 보조 메모리로 이동하는 것을 스왑 아웃(swap out), 보조 메모리에서 주 메모리로 이동하는 것을 스왑 인(swap in)이라고 한다.
               어셈블리 혹은 적재 시간 바인딩 프로세스의 경우 동일한 주소로 스왑되어야 하지만 실행 시간 바인딩 프로세스의 경우 빈 메모리의 어떤 공간으로도 스왑될 수 있다.
               스와핑은 문맥 교환 시간(context-switch time) 상당히 걸리므로, 프로세스를 라운드 로빈 스케줄링 기법으로 관리한다면 시간 할당량은 문맥 교환 시간보다 커야함.
               스왑을 할 프로세스는 반드시 유휴 상태여야 합니다. 만약 입/출력 장치와 신호를 주고받던 프로세스를 스왑하게 된다면 잘못된 입/출력 내용이 저장되거나 다른 프로세스에게 저장될 수도 있다.
               일반적으로 디스크 내의 스왑공간은 파일 시스템과 별도로 할당되도록 하여 스왑 시간을 단축할 수 있다.
               
           연속 메모리 할당
                  초기 컴퓨터 시스템의 경우 한 컴퓨터는 한 사용자만이 사용했고, 또한 많은 프로그램을 동시에 실행시키지 않았다.
                  따라서 한 프로세스가 실행되기 위해 메모리 공간을 요구할 경우 메모리 상의 연속된 덩어리 공간을 할당해주는 연속 메모리 할당 방식을 이용함.
                  프로세스는 메모리 덩어리의 시작 주소를 통해 할당받은 메모리에 접근할 수 있으며, 각종 변수와 함수들을 바인딩하여 사용함.
                  
                  단일 사용자 할당
                      메모리는 일반적으로 두 부분으로 나눌 수 있습니다. 하나는 메모리에 상주하는 운영체제를 위한 것이고, 나머지는 사용자 프로세스를 위한 것
                      위에서 언급한 것과 같이 초기 컴퓨터 시스템은 단일 사용자에 의해서만 사용되었으므로 사용자 프로세스를 위한 공간을 나누어 사용할 필요가 없었다.
                      따라서 운영체제를 위한 메모리는 주로 인터럽트 벡터가 위치한 0번지 근처(하위 메모리)에 위치시키고, 사용자 프로세스를 위한 메모리는 나머지 공간을 연속적으로 사용했다.
                  다중 분할 할당
                      점점 실행되는 사용자 프로세스가 많한다.
                      아지며 사용자 프로세스를 위한 메모리 영역은 다시 여러 프로세스를 위해 다중으로 분할되어 할당되어야 함
                      이렇게 사용자 프로세스를 위한 메모리 공간을 다중으로 할당하는 것을 다중 분할 할당이라고 한다.
                      1. 고정 분할 할당 기법(정적 분할(Static Allocation) 기법)
                          메모리를 똑같은 고정된 크기로 분할하여 각 분할을 하나의 프로세스에게만 할당하는 방법
                          각 분할 개수는 다중 프로그래밍 정도
                          한 분할이 비게 되면 입력 큐의 다른 프로세스가 해당 분할을 차지
                          주로 초기 운영체제에 사용됨
                      2. 가변 분할 할당 기법(동적 분할(Dynamic Allocation) 기법)
                          미리 주 메모리를 분할하는 것이 아니라, 적재 시 필요한 만큼 크기로 영역을 분할하는 방법
                          주 메모리의 어떤 부분이 얼마나 사용되고 있는지 파악하는 테이블을 관리
                          메모리 내에 여러 크기 공간이 산재되어 있으므로 이 공간을 쪼개어 사용하거나 인근 공간을 합쳐 큰 공간으로 만드는 등의 과정을 고려해야 함
                          동적 공간 할당 문제를 해결하는 방법 : 최초 적합, 최적 적합, 최악 적합
                          일반적으로는 최초 적합과 최적 적합이 최악 적합에 비해 시간, 메모리 효율이 뛰어나다고 알려져 있
                  단편화(Fragmentation)
                      메모리 할당 시 메모리 공간 중 일부는 사용자에 의해 사용될 수 없는 빈 공간이 존재하는 문제가 발생할 수 있다. 이런 빈 공간을 단편화라고 한다.
                      단편화는 전체 주 메모리 중 듬성 듬성 비어있는 공간인 외부 단편화와, 사용자에게 할당된 주 메모리 공간 중 넉넉하게 할당되어 사용되지 않는 공간인 내부 단편화로 나눌 수 있다.
                      1. 외부 단편화
                          주 메모리 중 프로세스에게 할당되지 않은 프로세스와 프로세스 사이 틈새의 작은 자유 공간
                          이 자유 공간을 합쳐 하나의 큰 자유 공간을 만든다면 더 많은 프로세스를 할당할 수 있음
                          또한 압축을 통해 메모리의 모든 내용을 한 부분으로 몰고 나머지 자유 공간을 여유롭게 사용할 수도 있음
                          하지만 이를 위해서는 프로세스 내의 모든 주소들이 동적으로 재배치되어야 하고, 실행시간에 동적으로 바인딩 되는 경우에만 적용 가능함
                      2. 내부 단편화
                          프로세스가 요구하는 공간보다 할당된 공간이 약간 더 클 때 생기는 자유 공간
                          프로세스가 요구하는 공간을 정확히 할당해주는 것보다 약간 더 크게 할당해주고 공간을 낭비하는 것이 어떤 면에서는 비용적으로 더 효율적일 수 있음
           
           불연속 메모리 할당(Contiguous allocation)           
                위의 연속 메모리 할당에서 발생하는 단편화 문제를 해결하기 위해 한 프로세스를 위한 메모리를 메모리 상 여러 영역으로 분산하여 할당해주는 기법
                페이징 : 
                    페이징은 논리 주소 공간이 한 연속적인 공간에 모여있어야 한다는 제약을 없앴다.
                    따라서 프로세스를 주 메모리에서 디스크로 넘길 때 프로세스의 크기에 맞는 연속된 공간을 찾지 않아도 됨
                    페이징 원리 : 물리 메모리는 프레임(frame), 논리 메모리는 페이지(page)라 불리는 동일한 크기의 여러 블록으로 나누어져 있다.
                        CPU에서 나오는 모든 주소는 페이지 번호(p)와 페이지 변위(d: offset)로 나뉜다. 
                        페이지 테이블은 주 메모리 내의 페이지 점유 주소를 표현하고 있는데, 페이지 번호로 이 테이블에 엑세스하여 페이지 주소를 파악할 수 있다. 
                        페이지 주소에 페이지 변위를 더한 것이 물리주소가 된다.
                        페이징을 사용할 경우 모든 유휴 상태 프레임이 프로세스에 할당될 수 있으므로 외부 단편화는 발생하지 않는다.
                        하지만 내부 단편화를 피할 수는 없습니다. 공간 할당이 늘 프레임의 정수 배로 할당되기 때문.
                        이를 고려했을 때는 작은 페이지 크기가 바람직하지만, 이에 반비례하여 페이지 테이블의 크기가 커지는 문제가 발생하므로 디스크 입장에서는 페이지 크기가 클 수록 효율적
                        
                세그멘테이션 기법 : 
                        사용자의 메모리 관점과 실제 물리 메모리 관점은 다르다.
                        사용자(프로그래머)는 종종 프로그램을 작성하면서 함수나 모듈, 자료구조에 대해 메모리의 몇번째 주소로부터 몇 개의 바이트를 이용한다는 식으로 생각함.
                        이러한 사용자 관점에서의 메모리 관리를 가능하게 하는 메모리 관리 기법을 세그먼테이션이라고 합니다.
                        세그먼테이션에서는 논리 주소 공간을 세그먼트 집합으로 정의한다. 각 세그먼트는 이름과 길이를 가진다. 단, 세그먼트는 구현을 쉽게 하기 위해 내부에서 번호로 불린다. 따라서 논리 주소는 (segment number, offset(변위))로 구성됨다.
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
