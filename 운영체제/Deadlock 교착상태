Deadlock 교착상태

  한 프로세스 집합 내의 모든 프로세스가 그 집합 내의 다른 프로세스에 의해서만 발생될 수 있는 사건을 기다리는 상황이 발생하여, 프로세스들이 모두 무한정 대기에 빠지는 것
  교착상태 발생의 필요 조건은 다음 네 가지 조건이 동시에 성립될 때 발생할 수 있다.
      1. 상호 배제(Mutual exclusion)
          한번에 한개의 프로세스만이 공유 자원을 사용할 수 있어야 한다. 
          다른 프로세스가 그 자원을 요청할 경우, 요청 프로세스는 자원이 방출될 때까지 대기해야 한다.
      2. 점유하며 대기(Hold-and-wait)
          최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어 사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 힘. 
      3. 비선점(No preemption)
          다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야함.
      4. 순환 대기(Circular wait)
          공유자원과 공유자원을 사용하기 위해 대기하는 프로세스들이 원형으로 구성되어 있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에 있는 프로세스의 자원을 요구해야 함. 
    
    교착상태 처리방법
        1. 시스템이 교착상태가 되지 않도록 보장하기 위해 교착 상태를 예방하거나 회피하는 프로토콜을 이용.
        2. 시스템이 교착상태가 되도록 허용한 다음 회복시킴.
        3. 문제를 무시하고, 교착상태가 시스템에서 발생하지 않은 척 한다.
            놀랍게도 UNIX와 Windows를 비롯한 대부분의 운영체제는 세 번째 방법을 사용한다. 
            이는 드물게 발생하는 교착상태에 대해 처리 비용과 오버헤드가 큰 교착상태 예방, 회피 및 탐지, 복구 알고리즘을 적용하는 것보다 
            수작업으로 시스템을 중지하고 재시작하는 것이 더 낫다고 판단하기 때문
            
        교착상태 예방 : 교착상태를 예방하기 위해서는 앞서 언급한 4가지의 교착 상태 발생 필요 조건 중 적어도 하나가 성립하지 않도록 보장해야 함
            1. 상호 배제 부정 : 읽기 전용 파일과 같은 공유 자원을 사용
            2. 점유 및 대기(Hold and Wait) 부정 : 프로세스 대기를 없애기 위해서 프로세스가 실행되기 전에 필요한 모든 자원을 할당 (자원 낭비 발생)
                                                 자원을 점유하지 않고 있을 때에만 다른 자원을 요청할 수 있도록 함 (기아상태가 될 수 있음)
            3. 비선점(No Preemption) 부정 : 모든 자원에 대한 선점을 허용합니다.
            4. 순환대기 부정 : 자원에 고유한 번호를 할당하고, 번호 순서대로 자원을 요구하도록 합니다. (자원 낭비 발생)
      
        교착상태 회피 : 교착상태를 예방은 장치 이용률이 저하되고 시스템 처리율이 감소된다는 한계가 존재.
                       다른 접근으로는 프로세스가 일생 동안 요청하고 사용할 자원에 대한 정보를 사전에 제공받아, 교착상태를 미리 예측하는 방법이 있다.
                       이를 위해서는 현재 가용 자원, 현재 각 프로세스에게 할당된 자원, 각 프로세스가 앞으로 요청하거나 방출할 자원을 고려해야 한다
                       이 알고리즘을 통해 시스템 안전 상태(프로세스들이 요청하는 모든 자원을 교착 상태를 발생시키지 않고 할당해줌)를 판단할 수 있다.
                          자원 할당 그래프 알고리즘 : 시스템의 각 자원 유형 별로 단 하나의 인스턴스만 존재하는 경우 자원 할당 그래프를 조금 변형시켜 교착 상태를 예견할 수 있다.
                                                    요청 간선과 할당 간선에 예약 간선이라는 새로운 유형을 도입한다. 
                                                    예약 간선은 프로세스가 미래에 해당 자원을 요청할 것이라는 의미를 내포
                                                    따라서 프로세스 실행 전 모든 예약 간선을 자원 할당 그래프에 명시해둔다면 교착 상태가 발생할 것을 사전에 예측할 수 있다.
                          은행원 알고 리즘 : 시스템의 각 자원 유형 별로 여러개의 인스턴스가 존재하는 경우 적용할 수 있는 알고리즘이다.
                                            이름에서 볼 수 있듯이 은행에서 돈을 빌리려는 다수의 고객이 존재할 때, 은행이 파산하지 않고 모든 고객에게 돈을 빌려주는 원리를 이용.                          
        
        교착상태 탐지 : 교착상태가 발생했는지 확인하기 위한 시스템 상태 검사 알고리즘과 교착 상태로부터 회복하는 알고리즘이 필요
            1. 자원 유형이 한 개씩 있는 경우 : 대기 그래프가 사이클을 포함할 경우 시스템에 교착상태가 존재한다고 판단할 수 있습니다.
            2. 자원 유형 별 자원이 여러개 있는 경우 : 가용(Available), 할당(Allocation), 요청(Request) 자료구조를 이용하여 모든 프로세스가 요구하는 자원을 충족시켜줄 안전 순서열이 존재하는지 여부를 파악합니다.
        
        교착상태로부터 회복 : 두가지가 있음. 첫번째는 프로세스를 중지시킴으로써 순환 대기를 깨뜨리는 것이고, 두 번째 방법은 희생자를 선택하고 프로세스로부터 자원을 선점하는 것.
        
