Race Condition(경쟁 상태)

  여러 프로세스(혹은 쓰레드)가 동시에 공통 자원을 읽거나 쓰는 동작을 하고 그 실행 결과가 접근이 발생한 순서에 의존하는 상황
  경쟁상태에서는 실행 결과가 개발자의 의도와 다르게 나올 수 있다. 
  이 문제는 항상 발생하는 게 아니라 기계어 레벨에서 특정한 순서로 수행되었을 때만 발생하게 되므로 
  디버깅 시에는 문제점이 전혀 보이지 않아 고치기가 매우 어렵다. 
   그래서 멀티프로세스 프로그래밍을 할 경우에 Race condition 방지를 위해 프로세스 동기화(한번에 하나의 프로세스만 자원에 접근하도록 하는 것) 를 해야한다.
   
   임계구역(Critical Section)
      다른 프로세스와 공유하는 자원에 접근하는 코드 세그먼트를 뜻한다.
      프로세스 동기화는 임계구역에 한번에 하나의 프로세스만 들어갈 수 있도록 함으로써 구현할 수 있다.
      while(true){
          // entry section: 임계구역 진입 요청 코드
          // critical section:  임계 구역
          // exit section: 임계구역에서 빠져나오는 코드
          // remainder section: 나머지 코드 총칭
       }    //--> 이렇게 네부분으로 나뉨
       
       임계구역 문제 : 프로세스들이 데이터를 협력적으로 공유하기 위해서 자신들의 활동을 동기화 할 때 사용할 수 있는 프로토콜을 설계하는 것
          다음의 세가지 요구조건을 충족해야 함.
          1. 상호 배제(mutual exclusion): 프로세스 Pi가 자기의 임계구역에서 실행된다면 다른 프로세스 들은 그들 자신의 임계구역에서 실행될 수 없다.
          2. 진행(progress): 임계구역에서 실행되는 프로세스가 없고 임계구역으로 진입하려고 하는 다른 프로세스들이 있다면, 
                             기다리는 프로세스들만 다음에 누가 그 임계구역으로 진입할 수 있는지를 결정하는 데 참여가능하며 이 선택은 무한정 연기될 수 없다.
          3. 한정된 대기(bounded waiting)*: 프로세스가 자기의 임계구역에 진입하려는 요청을 한 후부터 그 요청이 허용될 때까지 
                                           다른 프로세스들이 그들 자신의 임계구역에 진입하도록 허용되는 횟수에 한계가 있어야 한다.
          
          이러한 요구조건들이 모두 충족되어야 프로세스 동기화가 정상작동할 수 있다.
          
          동기화 기법들 : 
              1. 소프트웨어 기반 해결책: 알고리즘이 상호 배제를 보장하기 위해 운영체제나 특정 하드웨어 명령어의 특별한 지원을 포함하지 않는 방법)
                  Peterson's Solution
              2. 하드웨어 기반 해결책: 운영체제나 특정 하드웨어 명령어의 특별한 지원을 활용하는 방법
                  메모리 장벽
                  하드웨어 명령어(test_and_set(), compare_and_swap())
                  원자적 변수
              3. Mutex Locks: 응용 프로그래머가 사용할 수 있도록 운영체제 설계자들이 제공하는 상위 수준 소프트웨어 도구 중 가장 간단한 형태.
              4. Semaphore: mutex와 유사하지만 프로세스들이 자신의 행동을 더 정교하게 동기화 할 수 있는 방법을 제공하는 도구
                  //뮤텍스와 세마포어는 따로 필기
