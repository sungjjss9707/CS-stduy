프로세스

  프로세스(Process)는 운영체제로부터 자원을 할당 받은 작업의 단위를 뜻한다.
  프로그램을 실행하면 운영체제는 프로그램 파일을 컴퓨터 메모리 공간에 할당한다.
  즉, 메모리 공간을 할당받아 실행되고 있는 프로그램을 프로세스라고 할 수 있다.
  운영체제는 프로세스마다 각각 독립된 메모리 영역을 Code/Data/Stack/Heap 형식으로 할당한다.
  Data에는 전역 변수들이 저장되고 Stack에는 함수의 매개변수, return 주소, 로컬 변수와 같은 임시 값들을 저장한다. 
    heap에는 프로세스 실행 중에 동적으로 할당되는 값들이 저장됨.
    *코드영역 : 프로세스가 실행할 코드가 기계어의 형태로 저장된 공간이다. (컴파일 타임에 결정, Read-Only)
    *데이터영역 : 전역 변수, static 변수 등이 저장된 공간이다. 전역 변수, static 변수를 참조한 코드는 컴파일하고 나면 데이터 영역의 주소값을 가르킨다. (컴파일 타임에 결정, Read-Write : 실행 도중 변경 가능)
    *힙영역 : 프로그래머가 관리하는 메모리 영역으로, 힙 영역에 메모리를 할당하는 것을 동적 할당이라고 한다. (런타임에 결정, 스택보다 할당할 수 있는 메모리 공간이 많으나 데이터 읽고 쓰기가 느림)
    *스택영역 : 함수 안에서 선언된 지역변수, 매개변수, 리턴값, 복귀 주소 등이 저장된다. 스택의 LIFO 방식에 따라 함수 호출 시 기록하고 종료되면 제거한다. (컴파일 타임에 결정, 정해진 크기가 있으므로 stack overflow 에러 발생 가능)
  각 프로세스는 별도의 메모리 공간에서 실행되기 때문에 다른 프로세스의 자원에 접근할 수 없으며, 접근하려면 IPC(Inter Process Communication)를 사용해야 합니다.
  
  멀티 프로세스
      멀티 프로세스는 하나의 응용 프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업을 수행하도록 하는 것이다.
      장점 : 멀티 프로세스는 프로세스 중 하나에 문제가 발생했을 때 그 프로세스 외의 프로세스에 영향이 생기지 않는다.
      단점 : Context Switching이 발생하면 CPU 레지스터와 캐쉬에 있는 데이터를 모두 리셋해야 하므로 오버헤드가 매우 크다.
             프로세스는 각각의 독립된 메모리 영역을 할당 받았기 때문에 프로세스 사이의 통신을 위해서는 IPC를 이용해야 한다.
  
쓰레드

  쓰레드(Thread)는 프로세스가 할당 받은 자원을 이용하는 실행 흐름의 단위를 뜻한다.
  쓰레드는 프로세스의 작업들을 실행 흐름에 따라 분리한 것
  기본 적으로 프로세스는 최소 1개의 쓰레드를 가지고 있다. 이를 메인 쓰레드라고 한다.
  쓰레드는 프로세스 안에 존재합니다. 프로세스와 쓰레드를 코드에 비유하면 프로세스는 코드 전체이고 쓰레드는 그 중 main 함수와 같이 함수들이 될 수 있다.
  쓰레드는 프로세스 내에서 Stack만 따로 할당받고, Code, Data, Heap 영역은 공유한다.
  
  멀티 쓰레드
      멀티 쓰레드는 하나의 응용 프로그램을 여러 개의 쓰레드로 구성하여 각 쓰레드가 하나의 작업을 수행하도록 하는 것이다.
      하나의 프로세스를 다수의 실행 단위로 구분하여 자원을 공유하고 자원의 생성과 관리의 중복성을 최소화하여 수행 능력을 향상시키는 것을 멀티스레딩이라고 한다.
       이 경우 각각의 쓰레드는 독립적인 작업을 수행해야 하기 때문에 각자의 스택과 PC 레지스터 값을 갖고 있다.
       *스택을 쓰레드마다 독립적으로 할당하는 이유 : 
          스택은 함수 호출 시 전달되는 인자, 되돌아갈 주소값 및 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간이다.
          독립적인 실행 흐름을 추가하기 위해서는 독립적인 함수 호출이 가능해야 하기때문에 스택 메모리 공간이 독립적으로 존재해야 함.
      *PC Register 를 쓰레드마다 독립적으로 할당하는 이유 : 
          쓰레드는 CPU 를 할당받았다가 스케줄러에 의해 다시 반환한다. 
          그래서 PC Register에 쓰레드가 명령어의 어느 부분까지 수행했는지 PC 값을 저장해놓을 필요가 있다.
          장점 : 쓰레드 간 데이터 공유가 가능하므로 데이터를 주고 받는 것이 비교적 수월하다.
                 Context Switching이 발생했을 때 stack 영역만 처리하므로 더 적은 오버헤드가 발생한다.
                 더 적은 메모리 영역이 필요하므로 시스템의 자원 소모도 감소할 수 있다.
          단점 : 쓰레드 중 하나에 문제가 발생했을 때 전체 프로세스에 영향을 끼치는 단점이 있다.
                 자원을 공유하기 때문에 동기화 문제가 발생할 수 있다.
