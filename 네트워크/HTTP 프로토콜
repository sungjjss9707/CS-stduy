HTTP

  HTTP(Hypertext Transfer Protocol)는 인터넷 상에서 데이터를 주고 받기 위한 서버/클라이언트 모델을 따르는 프로토콜이다.
  애플리케이션(응용) 레벨의 프로토콜로 TCP/IP위에서 작동한다.
  HTTP로 보낼 수 있는 데이터는 HTML문서, 이미지, 동영상, 오디오, 텍스트 문서 등 여러 종류가 있다.
      하이퍼텍스트 : 기존의 책과 같은 선형적인 텍스트가 아니라, 월드 와이드 웹에서 사용되는 하이퍼링크와 하이퍼텍스트를 통해서 이어지는 비선형적인 텍스트
  "하이퍼텍스트 기반으로(Hypertext) 데이터를 전송하겠다(Transfer)" = "링크 기반으로 데이터에 접속하겠다"는 의미이다.
  TCP 80포트를 사용한다.

  HTTP 작동방식
      HTTP는 기본적으로 요청/응답 (request/response) 구조로 되어 있다.
      클라이언트가 HTTP Request를 서버에 보내면 서버는 HTTP Response를 보내는 구조.
      비연결적이므로 서버는 request를 보내고 클라이언트와 연결을 끊음
      클라이언트와 서버의 모든 통신이 요청과 응답으로 이루어 진다.
      
  HTTP의 특징
      비연결성 (Connectionless) : 클라이언트에서 서버에 요청을 하고 서버가 요청을 받아 응답하게 되면 연결을 끊어버리는 특징
          지속적인 연결로 인한 서버 부담이 줄어드는 장점이 있으나 클라이언트의 이전 상태를 알 수가 없게 된다.
          이전 상태 정보를 알 수 없게 되면 로그인을 성공하더라도 로그 정보를 유지할 수 없게 된다.
          *HTTP 1.1 부턴 지속적 연결 상태가 기본이며 이를 해제하기 위해선 명시적으로 요청 헤더를 수정해야 한다.

      무상태성 (Stateless) : 비연결성(Connectionless)에서 파생되는 특징으로 각각의 요청이 독립적으로 여겨지게 되는 특징
          서버는 클라이언트의 상태(State)를 유지하지 않으므로 Cookie, Session 등을 이용하여 클라이언트 인증, 인식을 한다.
  
  HTTP 요청 구조
      HTTP Request 메세지는 크게 3부분으로 구성된다.
      1. Start Line (Status Line) : 말 그대로 HTTP request의 첫 라인으로, start line 또한 3부분으로 구성되어 있다.
          1).HTTP Method : 해당 request가 의도한 action을 정의하는 부분
              HTTP Methods에는 GET, POST, PUT, DELETE, OPTIONS 등이 있다.
              주로 GET 과 POST과 쓰인다.
          2). Request target : 해당 request가 전송되는 목표 URL
          3). HTTP Version : 말 그대로 사용되는 HTTP 버전으로, 1.0, 1.1, 2.0 등이 있다.
      2. Headers : 해당 request에 대한 추가 정보를 담고 있는 부분
          예를 들어, request 메세지 body의 총 길이 (Content-Length) 등
          Key:Value 구조로 되어 있다. (: 이 사용됨)
          HOST: google.com => Key = HOST, Value = google.com
          Headers도 크게 general headers, request headers, entity headers 3부분으로 구성되어 있다.
      3. Body : 해당 reqeust의 실제 메세지/내용으로, Body가 없는 request도 많다.
          예를 들어, GET request들은 대부분 body가 없는 경우가 많음.

  HTTP 응답 구조
      Response도 request와 마찬가지로 크게 3부분으로 구성되어 있다.
      1. Start Line (Status Line) : Response의 상태를 간략하게 나타내주는 부분으로, 3부분으로 구성되어 있다.
          HTTP/1.1 404 Not Found 에서
          1). HTTP 버전
          2). Status code: 응답 상태를 나타내는 코드 (예를 들어, 404)
          3). Status text: 응답 상태를 간략하게 설명해주는 부분 (예를 들어, "Not Found")
      2. Headers : Request의 headers와 동일하다. 다만 response에서만 사용되는 header 값들이 있다. 예를 들어, User-Agent 대신에 Server 헤더가 사용된다.
      3. Body : Request의 body와 일반적으로 동일하다. Request와 마찬가지로 모든 response가 body가 있지는 않다. 데이터를 전송할 필요가 없을 경우 body가 비어있게 된다.


  HTTP 버전
      현재는 주로 HTTP/1.1, HTTP/2.0을 사용한다.
      1. HTTP/1.0 : 처음으로 널리 사용하기 시작한 버전이다.
      2. HTTP/1.0+ : keep alive 커넥션, 프록시 연결 지원 등의 기능이 추가 되었다.
      3. HTTP/1.1 : 1.0에서는 연결하고 끊고를 반복하면 서버나 클라이언트 모두에 부담이 된다. 그래서 1.1은 pipeline(파이프라인) 기능을 추가하여 매번 연결을 맺고 끊고 하는 과정을 줄여서 속도를 높였다.
          PUT, DELETE 등의 새로운 Method가 추가 되었다.
          
      http 1.x 에서는 헤더가 너무 커서 문제였음 -> 이밑에서부턴 헤더를 압축해서 그걸 개선시킴(허프만 코딩 기법을 씀 -> 빈도수 체크해서 압축하는거)    
      
      4. SPDY : 구글이 만든 프로토콜로, HTTP의 속도를 개선시키기 위해 만들었다.
          대표적인 기능으로 헤더를 압축하는 기능과 하나의 TCP커넥션에 여러 요청을 동시에 보내는 기능, 클라이언트가 요청을 보내지 않아도 서버가 리소스를 푸시하는 기능 등을 갖추고 있다.
      5. HTTP/2.0 : 2012년 구글이 만든 SPDY 프로토콜을 기반으로 만들어진 프로토콜이다.
          1.1은 컨넥션 하나에서 여러개의 파일을 전송할 수 있는 1개의 파이프라인을 연결하는데 2.0은 연결이 되면 여러개의 파이프라인을 꽂는다고 생각하면 된다.
          이걸 stream(스트림) 이라고 하는데 1번 파이프라인으로 전송되던 파일이 늦어지면 2번, 3번 또는 다른 파이프라인으로 보내기 때문에 늦어지는 현상이 1.1에 비해서 짧다는 장점이 있다.

  HTTP VS HTTPS
      HTTPS 프로토콜과 HTTP 프로토콜의 가장 큰 차이는 보안이다.
      HTTPS 프로토콜은 SSL 암호화 방식을 이용해 요청과 응답 주체를 인증할 수 있고, 
      전송하는 데이터도 암호화 되어있으므로 해독하여 위, 변조할 수 없다. 즉, 데이터의 무결성을 보장한다.
      사용자의 개인정보나 결제 정보 등과 같이 민감하고 중요한 정보를 전송해야할 경우 HTTPS 프로토콜을 이용해야 한다.
      부가적인 차이는 SEO 품질이다.
          *SEO(Search Engine Optimization, 검색 엔진 최적화) : 구글 등의 검색 엔진에서 웹사이트가 잘 검색되고 노출될 수 있도록 검색을 최적화 하는 전략
      검색 엔진 구글은 HTTPS 프로토콜을 이용하는 웹 사이트에 대해 SEO 가산점을 제공하여 웹 사이트들이 HTTPS 프로토콜을 이용하도록 유도하고 있다.
      나아가 크롬과 같은 브라우저에서는 HTTP 프로토콜을 이용하거나 신뢰할 수 없는 인증서를 이용해 통신할 경우 
      ‘안전하지 않음’ 이라는 메시지를 출력함으로써 사용자가 HTTP 웹 사이트를 접속하는 것을 간접적으로 막고 있다.
      한국의 경우, 인터넷 결제나 인터넷 뱅킹 등의 개인정보 입력이 필요한 사이트에서는 법적으로 반드시 HTTPS를 사용해야 한다.
      
  HTTP method
      종류 : 
          1. GET : URI(URL)가 가진 정보를 검색하기 위해 서버 측에 요청하는 형태이다. : 
          2. HEAD : GET 방식과 동일하지만, 응답에 BODY가 없고 응답코드와 HEAD만 응답한다.
               -Resource를 받지 않고 오직 찾기만 원할 때
               - object가 존재할 경우 응답의 상태 코드를 확인할 때
               - 서버의 응답 헤더를 봄으로써 Resource가 수정되었는지 확인 등의 용도로 사용된다.
          3. POST : 요청된 자원을 생성(CREATE) 한다. 서버에 Input Data를 보내기 위함. (HTML form에 많이 사용)
          4. PUT : 요청된 Resource를 수정(UPDATE) 한다.
          5. PATCH : PUT과 유사하게 요청된 Resource를 수정(UPDATE) 할 때 사용한다. PUT은전체를 갱신하지만 PATCH는 일부 갱신
          6. DELETE : 요청된 Resource를 삭제할 것을 요청함. (안전성 문제로 대부분의 서버에서 비활성 = 항상 보장되지 않음)
          7. CONNECT : 요청한 리소스에 대해 양방향 연결을 시작하는 메소드이다.
          8. TRACE : 클라이언트로부터 Request Packet이 방화벽, Proxy Server, Gateway 등을 거치면서 packet의 변조가 일어날 수 있다.
              이때 Server에 도달했을 때의 최종 Packet의 Request Packet을 볼 수 있다.
          9. OPTIONS : Target Server의 지원 가능한 메소드의 종류를 확인할 경우 사용.
          
        특징 : 
            1. 안정성 (Safe) : 리소스를 수정하지 않는 메소드들을 Safe 하다고 말한다.
                안전한 메서드의 목적은 서버에 어떤 영향을 줄 수 있는 안전하지 않은 메서드가 사용될 때 사용자들에게 그 사실을 알려줄 수 있도록 하는 것이다.
                읽기 전용인 경우 안전한 메서드로 간주하며, GET, HEAD, OPTIONS 메서드는 안전한 메서드로 정의되어 있다.
            2. 멱등성 (Idempotent) : 멱등성이란 특정 메서드의 요청을 여러번 하더라도 한번 요청했을 때와 결과가 같다면 멱등하다라고 한다.
                PUT, DELETE, TRACE 및 GET, HEAD, OPTIONS가 멱등성을 갖는다.
            3. 캐시 가능성(Cacheable) : 향후 재사용을 위해 이에 대한 응답을 저장할 수 있음을 나타낸다.
                현재 시점의 응답이나 권한 있는 응답에 의존하지 않는 안전한 메서드는 캐시 가능한 것으로 정의한다.
                GET, HEAD, POST, PATCH가 캐시가 가능하지만 실제로는 GET과 HEAD만 주로 캐싱이 쓰인다고 한다.
                
  HTTP 상태코드 : HTTP 상태 코드는 3자리 숫자로 만들어져 있으며, 첫번째 자리는 1에서 5까지 제공된다.
      첫번째 자리가 4와 5인 경우는 정상적인 상황이 아니기 때문에 관리자가 즉시 알아야 하는 정보이다.
      1XX: Information response : 상태 코드가 1로 시작하는 경우는 서버가 요청을 받았으며, 서버에 연결된 클라이언트는 작업을 계속 진행하라는 의미이다.
      2XX: Successful response : 코드가 2로 시작하는 경우는 서버가 요청을 성공적으로 받았으며, 수용했다는 의미이다.
      3XX: Redirection messages : 상태 코드가 3으로 시작하는 경우는 요청 완료를 위해 추가 작업 조치가 필요함을 의미한다.
      4XX: Client error response : 상태 코드가 4로 시작하는 경우는 클라이언트 요청의 문법이 잘못되었거나 요청을 처리할 수 없음을 의미한다.
      5XX: Server error response : 상태 코드가 5로 시작하는 경우는 서버가 명백히 유효한 요청에 대한 처리를 실패했음을 뜻한다.
  
  
  
  
  
  
  
