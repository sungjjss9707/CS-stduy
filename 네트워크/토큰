Token

  프로그래밍 언어에서의 토큰은 문법적으로 더 이상 나눌 수 없는 기본적인 언어요소를 말한다.
  예를 들어 하나의 키워드나 연산자 또는 구두점 등이 토큰이 될 수 있다.
  
  토큰 기반 시스템의 작동 원리
      토큰 기반 시스템은 stateless 하다. 무상태, 즉 상태유지를 하지 않는다는 것이다.
      토큰 기반의 시스템에서는 유저의 인증 정보를 서버나 세션에 담아두지 않는다.
      세션이 존재하지 않으니 유저들이 로그인 되어있는지 안되어있는지 신경 쓰지 않으면서 서버 확장이 가능해질 것이다.
      
  동작 플로우 : 
      1. 유저가 아이디와 비밀번호로 로그인
      2.서버에서 해당 계정의 정보를 검증
      3.계정 정보가 정확하다면 서버에서 유저에게 signed 토큰을 발급
          → signed : 해당 토큰이 서버에서 정상적으로 발급된 토큰임을 증명하는 signature를 지니고 있다는 뜻
      4.클라이언트에서 전달받은 토큰을 저장해두고, 서버에 요청할 때마다 해당 토큰을 함께 서버에 전달
      5.서버는 토큰을 검증하고 요청에 응답
      6.웹 서버에서 토큰을 서버에 전달할 때는, HTTP 요청의 헤더에 토큰값을 포함시켜 전달
      
  토큰의 장점
      무상태 stateless 이며 확장성 scalability 이 있다.
      보안성 : 클라이언트가 서버에 요청을 보낼 때, 더 이상 쿠키를 전달하지 않음으로 쿠키를 사용함으로 인해 발생하는 취약점이 사라진다.
      확장성 exensibility : 여기서의 확장성은 처음의 scalability 와는 다르다.
          scalability 는 서버 확장을 의미하는 반면, extensibility 는 로그인 정보가 사용되는 분야를 확장하는 것을 의미한다.
      여러 플랫폼 및 도메인 : 어플리케이션과 서비스의 규모가 커지면, 여러 디바이스를 호환시키고 더 많은 종류의 서비스를 제공하게 된다.
      
      
  JWT : JSON Web Token (JWT) 는 웹표준 (RFC 7519) 으로서 두 개체에서 JSON 객체를 사용하여 가볍고 자가수용적인 (self-contained) 방식으로 정보를 안전성있게 전달한다.
      JWT는 C, Java, Python, C++, R, C#, PHP, JavaScript, Swift 등 대부분의 주 프로그래밍 언어에서 지원된다.
      JWT 시스템에서 발급된 토큰은 토큰에 대한 기본 정보, 전달할 정보, 토큰의 검증 여부인 signature 등을 포함하고 있다.
      동작 플로우 : 
          1. 사용자가 아이디와 비밀번호를 입력해 로그인
          2. 서버는 요청을 확인하고 secret key를 통해 Access token 발급
          3. 이후 JWT가 요구되는 API를 요청할 때 클라이언트가 Authorization 헤더에 Access token을 담아 보냄
          4. 서버는 JWT Signature 를 체크하고 Payload 로부터 유저의 정보를 확인해 데이터를 리턴

  JWT 구조
      Header : 
          typ : 토큰의 타입을 지정한다. (JWT)
          alg : 해싱 알고리즘을 지정한다. 보통 HMAC SHA256 또는 RSA가 사용되며, 
          이 알고리즘은 토큰을 검증할 때 사용되는 signature 부분에서 사용된다.
      Payload : 토큰에 담고 싶은 정보를 JSON 형태로 포함하고 있다.
          페이로드에 담는 정보의 한 조각을 클레임이라고 부르고, 이것은 name / value 의 쌍으로 이루어져 있다.
          토큰에는 여러개의 클레임을 넣을 수 있으며 이는 등록된 클레임 registered , 공개 클레임 public , 비공개 클레임 private 세 종류가 있다.
      Signature : 헤더의 인코딩 값과, 정보의 인코딩 값을 합친 후 주어진 secret key로 해쉬 함수를 적용해 생성한다.
      
  JWT 사용 이유 : 
      만약 Android , iOS 모바일 어플리케이션을 개발한다면, 안전한 API를 위해 쿠키와 같은 인증 시스템은 인상적이지 않다.
      토큰 기반 인증을 도입한다면, 더욱 간단하게 번거로움을 해결할 수 있다.
      또한 클라이언트 측에서 저장하기 때문에 완전히 stateless 하며 서버를 확장하기 적합한 환경을 갖춘다.
      
  JWT 장단점 : 
      장점 : 
          토큰은 클라이언트 측에 저장되기 때문에 서버는 완전히 stateless 하다.
          클라이언트와 서버의 연결고리가 없기 때문에 확장하기에 매우 적합하다.
          쿠키 사용에 의한 취약점이 사라진다.
          서버 기반 인증 시스템의 문제점 중 하나인 CORS를 해결할 수 있따.
      단점 :
          한 번 발급된다면 만료 기간까지 계속 이용해야 한다.
          암호화하지 않고 인코딩하기 때문에 페이로드 정보가 제한적이다.
          JWT의 길이가 길어 인증 요청이 많아질수록 서버의 자원 낭비가 생길 수 있다.
          
          
  OAuth : Open Authorization, Open Authentication 을 뜻하는 것으로 애플리케이션(페이스북, 구글, 트위터 등의 Service Provider) 유저의 비밀번호를 Third-Party 앱에 제공 없이 인증, 인가를 할 수 있는 오픈 스탠다드 프로토콜이다.
      OAuth 인증을 통해 애플리케이션 API를 유저 대신에 접근할 수 있는 권한을 얻을 수 있다.
