컴퓨터의 역사

  제1세대 : 진공관
      컴퓨터의 1세대는 디지털 논리 요소들과 기억장치를 위하여 진공관을 사용함. IAS로 알려진 가장 유명한 1세대 컴퓨터를 분석해보자
      IAS(프린스턴 고등연구소에서 개발된 초기 전자 컴퓨터 == 폰노이만 기계)는 stored-programm concept 방식(프로그램 내장방식)을 이용하여 설계됨. 
      이 방식은 폰노이만에 의해 제안됨. 그 아이디어는 새로운 컴퓨터인 EDVAC(electronic discrete variable computer)의
      개발을 위하여 폰노이만이 작성한 1945년 제안서를 통하여 처음으로 발표되었다. IAS 컴퓨터는 1952년에 가서야 완성되었지만, 그 이후에 출현한 모든 일반목정용 컴퓨터들의 프로토타입이 되었다.
      *IAS 컴퓨터의 일반적인 구조
          1. 주기억장치 : 데이터와 명령어들을 저장
          2. ALU : 2진수 데이터를 처리할 수 있다.
          3. CU : 기억장치에 있는 명령어들을 해석하고 실행되게 한다.
          4. 입력/출력 장치
      오늘날의 모든 컴퓨터들은 거의 예외없이 그와 동일한 일반적인 조직과 기능을 가지고 있으며, 따라서 폰노이만 기계 라고 불린다. 
      
      IAS의 기억장치는 4096개의 저장 장소 들로 구성됨.(40bit * 1000 == 4kB == 4096개의 저장소) 각 저장 장소에는 단어(WORD)라고 불리는 40개의 2진숫자(비트)들이 저장됨. 데이터와 명령어들이 모두 여기에 저장됨
      따라서 숫자는 2진수로 표현되어야 하며, 각 명령어들도 2진코드여야함. 각 숫자는 한 개의 부호 비트와 39비트 데이터로 표현됨. 하나의 단어는 두개의 20비트 명령어들을 포함할 수 있는데,
      각 명령어는 수행될 동작을 지정해주는 8비트의 연산코드(==operation code : opcode)와 기억장치(0~999)내에 있는 각 단어를 지정하기 위한 12비트 주소로 구성된다.
      CU는 기억장치들로부터 명령어들을 한개씩 가져와 실행함으로써 IAS를 작동시킨다. 
      레지스터들 : 
          1. MBR(MEMORY BUFFER REGISTER) : 기억장치에 저장될 단어를 가지고 있거나, 기억장치로부터 읽혀진 단어를 저장한다.
          2. MAR(MEMORY ADDRESS RIGISTER) : 기억장치로 쓰여지거나 MBR로 읽혀질 단어의 기억장치 주소를 저장한다.
          3. IR(INSTRUCTION REGISTER) : 실행될 명령어의 8비트 연산 코드를 저장한다.
          4. IBR(INSTRUCTION BUFFER REGISTER) : 기억장치로부터 읽혀진 단어의 우측에 위치한 명령어를 일시적으로 저장하는데 사용된다. 
          5. PC(PROGRAM COUNTER) : 기억장치로부터 읽혀질 다음 명령어의 주소를 저장한다.
          6. AC(ACCUMULATOR) : 계산에 사용될 데이터와 ALU의 계산결과를 일시적으로 저장한다.
          *AC, MBR는 ALU 내부 레지스터, IBR, IR, PC, MAR는 CU 내부 레지스터임
          
      인출사이클 : 
          1. PC에 100을 입력
          2. PC에서 MAR로 100을 넘겨줌
          3. MAR에서는 100을 100번지 주소로 인식함
          4. MAR는 메모리 100번지를 검색함
          5. MAR가 검색한 100번지의 데이터를 MBR에 잠깐 저장함
          6. MBR 에서는 100번지의 데이터의 opcode와 address를 분리하여(명령어 단어는 opcode와 주소로 이루어져 있으므로) 각각 IBR, MAR로 옮긴다.
          7. 이후 IBR에서 IR로 옮겨짐

      실행사이클 :
          인출사이클에서 주소값이 100번지이다. 100번지에 저장되어있던 opcode와 address가 다음과 같다하자. 
          1. LOAD M(200)  //opcode : LOAD ,  address : 200   =>   200번지의 데이터를 로드해서 AC에 잠시 저장해라
          2. ADD M(201)   //opcode : ADD ,  address : 201    =>   AC의 200과 201번지의 데이터를 더해서 AC에 저장해라
