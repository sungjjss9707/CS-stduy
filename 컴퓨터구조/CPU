CPU

  Central Processing Unit
  CPU 혹은 중앙 처리 장치는 컴퓨터에서 기억, 해석, 연산, 제어라는 4대 주요 기능을 관할하는 장치를 말한다.
  프로그램의 명령어를 해석하여 데이터를 연산/처리를 하고 그렇게 돌아가도록 제어해주는 부분, 혹은 그 기능을 내장한 칩을 의미한다
  
  CPU 구조
      ALU(산술논리연산장치) : 산술연산(+,-,*./), 논리연산(AND, OR, NOT, XOR)등을 수행하는 디지털 회로이다.
      레지스터 : 프로세서에 위치한 고속 메모리로 극히 소량의  데이터나 처리 중인 중간 결과와도 같은 프로세서가 바로 사용할 수 있는 데이터를 담고 있는 영역
      CU(제어유닛) : 입출력 장치 간 통신 및 조율을 제어한다. 명령어들을 읽고 해석하며 데이터 처리를 위한 시퀀스를 결정한다.
                    명령어 레지스터(IR)에 있는 명령어를 해석하고, 해석한 내용을 바탕으로 각 실행할 담당자에게 지시를 한다
      내부 CPU 버스 : ALU와 레지스터들 간의 데이터 이동을 위한 데이터 선들과 CU로부터 발생되는 제어 신호 선들로 구성된 내부 벗
                     외부의 시스템 버스들과는 직접 연결되지 않는다.
  CPU 명령주기 : CPU에서는 프로그램을 실행하기 위해 주기억장치에서 명령어를 순차적으로 인출하여 해독하고 실행하는 과정을 반복하는데, 
      CPU가 주기억장치에서 한 번에 하나의 명령어를 인출하여 실행하는데 필요한 일련의 활동을 명령어 사이클 (Instruction Cycle)이라고 한다.
          Fetch(인출) : 메모리상의 프로그램 카운터가 가리키는 명령어를 CPU로 인출하여 적재.
          Decode(해석) : 명령어의 해석. 이 단계에서 명령어의 종류와 타겟 등을 판단한다.
          Execute(실행) : 해석된 명령어에 따라 데이터에 대한 연산을 수행한다.
          Writeback(쓰기) : 명령어대로 처리 완료된 데이터를 메모리에 기록한다.
      
  CPU 내부 레지스터
      프로그램 카운터(PC) : 다음에 인출할 명령어의 주소를 가지고 있다. 각 명령어가 인출된 후에 자동으로 한명령어 길이 만큼 크기 증가
                           분기 명령어가 실행되면 목적지 주소로 갱신됨
      누산기(AC) : 데이터를 일시적으로 저장하는 레지스터. 중간 산술 논리 연산 결과가 저장된다. 레지스터가 없으면 다음연산을 위해 다시 읽을 수 있도록 
                   각각의 계산(더하기, 곱하기, 시프트 등)의 결과를 주 기억장치에 기록할 필요가 있는데 이는 비효율 적임
      명령어 레지스터(IR) : 가장 최근에 인출된 명령어 코드가 저장되어 있는 레지스터 -> 주기억장치에서 수행할 명령을 가져오면 IR에 저장됨
      기억장치 주소 레지스터(MAR) : CPU가 데이터를 읽거나 쓰려는 메모리 주소를 일시적으로 저장한다. 
      메모리 버퍼 레지스터(MBR) : 메모리에 읽거나 쓰려는 데이터 또는 명령을 일시적으로 저장한다. 이 레지스터에 배치된 명령은 IR로 전송되고, 
                                 데이터 내용은 AC또는 I/O 레지스터로 전송된다. 즉 이 레지스터는 메모리를 읽거나 메모리에 쓰려는 데이터 또는 명령을 저장하는데 사용된다.
      I/O 주소 레지스터(I/O AR) : 특정 I/O 입출력 장치의 주소를 지정하는데 사용된다.
      I/O 버퍼 레지스터(I/O BR) : I/O 모듈과 프로세서간에 데이터를 교환하는데 사용되다.
      
      레지스터의 관점에서 바라본 CPU 명령 주기
          프로그램 카운터(PC)에 저장된 주소를 메모리 주소 레지스터(MAR)로 전달 한다.
          메모리 주소 레지스터(MAR)에 저장된 내용을 토대로 주기억장치의 해당 주소에서 명령어를 인출한다.
          인출한 명령어를 메모리 버퍼 레지스터(MBR)에 저장한다.
          메모리 버퍼 레지스터(MBR)에 저장된 내용을 명령어 레지스터(IR)에 저장한다.
          다음 명령어를 인출하기 위해 프로그램 카운터 (PC)의 값을 증가 시킨다. (이까지가 인출 사이클)
          CU가 IR을 해독해서 이 명령어가 (1)어느 메모리의 값을 (2)도대체 어떻게 하라는 명령어 인건지 해석한다.(이까지가 해석 사이클)
          명령어 레지스터(IR)의 내용중에 (1)어느 메모리가 가리키는 값인지 그 메모리를 메모리 주소 레지스터(MAR)로 전달한다.
          메모리에 저장된 데이터 값을 메모리 버퍼 레지스터(MBR)에 저장한다.
          누산기(AC)에 저장된 값에 ADD연산을 실행한다.
      
  인출 사이클 : 
      MAR = PC
      MBR = M[MAR]
      PC = PC+1
      IR = MRR;
      
  실행 사이클(address에 있는 애랑 지금 누산기에 있는 애랑 더하는 연산임) :
      MAR = IR(address)
      MBR = M[MAR]
      AC = AC+MBR
      
      
  아키텍처
      CPU 표준에 맞춰서 제작해야함. 서로 다른 회사라도 업계의 표준이 되는 CPU 설계 표준을 가지고 각자의 기술력을 이용하여 CPU를 제작함
      이러한 표준 설계 방식을 아키텍처라고 부름
      32비트 컴의 대중적인 표준 아키텍처가 x86, 64비트 컴이 x64임. 인텔이나 AMD등 다른회사라도 이 두개를 대부분 따름
      
  32비트 컴퓨터
      32비트 컴퓨터는 CPU 레지스터 가 한번에 읽을 수 있는 비트 수를 말함. 64비트도 마찬가지임
      레지스터의 크기가 32비트라면 CPU가 한 사이클 당 처리할 수 있는 데이터의 크기가 최대 32비트가 되는거임. 이게 늘어날수록
      한번에 처리할수 있는 양이 많아지고 결국 빨라지는거임. 
      일단 알아야하는거 : 명령어의 길이 = 단어(word)의 길이 이다
      //32비트 컴퓨터는 32비트 주소 지정 방식(32bit addressing)을 사용한다
      //32비트 주소 지정 방식은 하나의 
      그리고 32비트 컴퓨터는 2^32 개의 서로다른 명령어와 데이터 set을 가질 수 있다. 이는 약 40억 개이기 때문에 4GB의 용량까지만
      지원이 가능하다 -> 그래서 32비트 컴퓨터는 4GB이상 램 꽂아봤자 소용이 없다.
      










