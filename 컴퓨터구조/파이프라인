우선
단일 사이클 구현의 문제점 : 한 명령어를 실행하는 동안에 다음 명령어는 앞 명령어의 실행이 끝나기를 기다린다.
    -> 클럭 사이클 시간이 너무 길어져 성능이 저하됨
    
파이프라이닝 : 여러 명령어가 중첩되어 실행되는 구현 기술이다 -> 병렬성 이용
    각 명령어의 실행시간이 줄어들지 않치만, 여러 명령어를 처리할때 처리량을 개선함
    ex) 명령어는 5개, 명령어실행단계는 4단계, 한 명령어 처리시간이 1일때
        단일사이클 : 4*5*1 = 20
        파이프라이닝 : 4+1+1+1+1 = 8
        => 2.5배 좋아짐
        
    파이프라이인 해저드 : 다음 명령어가 다음 클럭 사이클에 실행될 수 없는 상황
        1. 구조적 해저드 : 다른 단계의 명령어들이 동시에 같은 자원을 사용하려는 상황 -> 해당자원을 여러개 설치해서 해결한다.
        2. 데이터 해저드 : 앞 명령어 결과 데이터를 사용해야하는데 앞이 아직 안끝나 사용 불가한 상황 -> 파이프라인 지연, 전방전달로 해결
        3. 제어 해저드 : 앞 분기 명령어 결과를 몰라서 다음 명령어를 인출하지 못하는 상황 -> 파이프라인 지연, 분기예측, 지연분기로 해결
  
